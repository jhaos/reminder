#!/bin/bash


function use_help()
{
	echo "Usage: --help|-h --if|-i --case|-c --tips|-t"
	exit 0
}

if [ $# = 0 ]
then
	use_help
fi

case $1 in
	-i|--if)
            echo "if [ \$1 = \"5\" ]
then
        echo \"Hello world\"
elif [ \$1 = \"2\" ]
then
        echo \"Hello world 2\"
else
        echo \"Bye world\"
fi
"
	;;
	-c|--case)
	    echo "case \$1 in
  bash)
    echo \"Nice language\"
    ;;
  *)
    echo \"Not as good as bash\"
    ;;
asec
        "
	;;
	-t|--tips)
		        echo "Usefull conditions:
        -z: to evaluate if a string is empty.
        Example: if [ -z \"myvar\" ]

        -d: to evaluate if a variable is a directory.
        Example: if [ -d \"mydir\" ]

        -f: to evaluate if a variable is a file.
        Example: if [ -f \"myfile\" ]

        -r: to evaluate if a file has read permissions.
        Example: if [ -f \"myfile\" ]

        -x: to evaluate if a file has execution  permissions.
        Example: if [ -x \"myfile\" ]

        -w: to evaluate if a file has write permissions.
        Example: if [ -w \"myfile\" ]

        -eq: to evaluate equality for numbers.
        Example: if [ \$1 -eq 1 ]
        Similar expressions: -ne,-gt,-lt,-ge,-le

        [[ ]] Similar to [ ] but allows regex
        Example: if [[ \$1 =~ \"h*.gz\"  ]]

        || is classic \"or\" and && is the \"and\" conditions
	
	\$#: The number of parameters into a bash script.
	Example: ./reminder --case. The value of \$# is 1.

	\$@: The parameters set into a bash script in separated words
	Example: ./script param1 param2. The output would be \"param1\" \n\"param2\"
        "
	;;
	-l|--loops)
		echo "loops"
	;;
	*)
	use_help
	;;
esac
